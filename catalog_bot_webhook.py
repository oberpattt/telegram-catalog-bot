from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters
)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "8272770257:AAHCYt5GKjdaweaTI3frG-tWzItJK8OGSIs"
ADMIN_ID = 181269564

# --- –ö–∞—Ç–∞–ª–æ–≥
catalog = {
    "–ò–≥—Ä—ã": [
        {"name": "–ò–≥—Ä–∞ –£–ª–∏—á–Ω—ã–π –≥–æ–Ω—â–∏–∫", "description": "–ó–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ —Å –æ—Ç–ª–∏—á–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫–æ–π –∏ —Å—é–∂–µ—Ç–æ–º.", "photo": "game1.jpeg", "price": 100},
        {"name": "–ò–≥—Ä–∞ Mortal Kombat (PS5)", "description": "–õ—É—á—à–∞—è –∏–≥—Ä–∞ –∂–∞–Ω—Ä–µ –¥—Ä–∞–∫", "photo": "game3.jpeg", "price": 250},
        {"name": "–ò–≥—Ä–∞ –í–µ–¥—å–º–∞–∫ 3. –î–∏–∫–∞—è –æ—Ö–æ—Ç–∞ (PS5)", "description": "–õcomplete edition –¥–ª—è PlayStation 5, —Ä—É—Å—Å–∫–∞—è –æ–∑–≤—É—á–∫–∞", "photo": "game4.jpeg", "price": 250},
        {"name": "–ò–≥—Ä–∞ Dishonored 2", "description": "–°–ª–æ–∂–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è, –≥–¥–µ —Ä–µ—à–∞–µ—Ç –∫–∞–∂–¥—ã–π —Ö–æ–¥.", "photo": "game2.jpeg", "price": 200},
    ]
}

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
carts = {}
orders = {}
order_info = {}

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–æ–≤
global_order_number = 0

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    [
        [KeyboardButton("–ö–∞—Ç–∞–ª–æ–≥ –∏–≥—Ä")],
        [KeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Ä–∑–∏–Ω—ã"), KeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")],
        [KeyboardButton("–ú–æ–∏ –∑–∞–∫–∞–∑—ã")],
        [KeyboardButton("‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã")]
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)

# --- –°—Ç–∞—Ä—Ç / –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=main_menu)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global global_order_number
    text = update.message.text
    user_id = update.message.from_user.id

    # --- –ö–∞—Ç–∞–ª–æ–≥ –∏–≥—Ä
    if text == "–ö–∞—Ç–∞–ª–æ–≥ –∏–≥—Ä":
        category = "–ò–≥—Ä—ã"
        keyboard = [[InlineKeyboardButton(f"{item['name']} ‚Äî {item['price']}—Ä", callback_data=f"item_{item['name']}")] for item in catalog[category]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(f"–ö–∞—Ç–∞–ª–æ–≥ {category}:", reply_markup=reply_markup)

    # --- –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Ä–∑–∏–Ω—ã
    elif text == "–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Ä–∑–∏–Ω—ã":
        cart_items = carts.get(user_id, [])
        if not cart_items:
            await update.message.reply_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=main_menu)
            return

        text_cart = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n"
        total = 0
        keyboard = []
        for i in cart_items:
            item = next((it for it in catalog["–ò–≥—Ä—ã"] if it["name"] == i), None)
            if item:
                text_cart += f"- {i} ‚Äî {item['price']}—Ä\n"
                total += item['price']
                keyboard.append([InlineKeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å {i}", callback_data=f"remove_{i}")])
        keyboard.append([InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        text_cart += f"\nüí∞ –ò—Ç–æ–≥–æ: {total}—Ä"
        await update.message.reply_text(text_cart, reply_markup=reply_markup)

    # --- –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    elif text == "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑":
        cart_items = carts.get(user_id, [])
        if not cart_items:
            await update.message.reply_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=main_menu)
            return
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:\n\n"
            "—Ç–µ–ª–µ—Ñ–æ–Ω: <–≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω>\n"
            "–∏–º—è: <–≤–∞—à–µ –∏–º—è>\n"
            "–∞–¥—Ä–µ—Å: <–∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏>\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n+7 123 456 78 90\n–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤\n—É–ª. –õ–µ–Ω–∏–Ω–∞ 10",
            reply_markup=main_menu
        )

    # --- –ú–æ–∏ –∑–∞–∫–∞–∑—ã
    elif text == "–ú–æ–∏ –∑–∞–∫–∞–∑—ã":
        user_orders = orders.get(user_id, [])
        user_infos = order_info.get(user_id, [])
        if not user_orders:
            await update.message.reply_text("üì¶ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.", reply_markup=main_menu)
            return

        text_orders = "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã:\n"
        for idx, order_dict in enumerate(user_orders):
            order_number = order_dict["order_number"]
            items = order_dict["items"]
            text_orders += f"\n–ó–∞–∫–∞–∑ {order_number}:\n"
            order_total = sum(next(it['price'] for it in catalog["–ò–≥—Ä—ã"] if it['name']==name) for name in items)
            for name in items:
                price = next(it['price'] for it in catalog["–ò–≥—Ä—ã"] if it['name']==name)
                text_orders += f"- {name} ‚Äî {price}—Ä\n"
            text_orders += f"üí∞ –ò—Ç–æ–≥–æ: {order_total}—Ä\n"

            if idx < len(user_infos):
                info = user_infos[idx]
                text_orders += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {info['phone']}\nüë§ –ò–º—è: {info['name']}\nüè† –ê–¥—Ä–µ—Å: {info['address']}\n"

        await update.message.reply_text(text_orders, reply_markup=main_menu)

    # --- FAQ
    elif text == "‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã":
        keyboard = [
            [InlineKeyboardButton("üí≥ –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã", callback_data="faq_payment")],
            [InlineKeyboardButton("üöö –î–æ—Å—Ç–∞–≤–∫–∞", callback_data="faq_delivery")],
            [InlineKeyboardButton("‚ÑπÔ∏è –û –Ω–∞—Å", callback_data="faq_about")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:", reply_markup=reply_markup)

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∑–∞–∫–∞–∑–∞ (—Ç—Ä–∏ —Å—Ç—Ä–æ–∫–∏)
    elif "\n" in text:
        lines = text.strip().split("\n")
        if len(lines) != 3:
            await update.message.reply_text(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ç—Ä–∏ —Å—Ç—Ä–æ–∫–∏: —Ç–µ–ª–µ—Ñ–æ–Ω, –∏–º—è, –∞–¥—Ä–µ—Å",
                reply_markup=main_menu
            )
            return

        phone, name, address = [line.strip() for line in lines]
        cart_items = carts.get(user_id, [])
        if not cart_items:
            await update.message.reply_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=main_menu)
            return

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
        global_order_number += 1
        order_number = global_order_number

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º
        orders.setdefault(user_id, []).append({
            "order_number": order_number,
            "items": cart_items.copy()
        })
        order_info.setdefault(user_id, []).append({
            "phone": phone,
            "name": name,
            "address": address
        })
        carts[user_id] = []

        total = sum(next(it['price'] for it in catalog["–ò–≥—Ä—ã"] if it['name']==name) for name in cart_items)
        text_order = f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_number}\n"
        for i in cart_items:
            price = next(it['price'] for it in catalog["–ò–≥—Ä—ã"] if it['name']==i)
            text_order += f"- {i} ‚Äî {price}—Ä\n"
        text_order += f"üí∞ –ò—Ç–æ–≥–æ: {total}—Ä\nüìû {phone}\nüë§ {name}\nüè† {address}"
        await update.message.reply_text(text_order, reply_markup=main_menu)

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá", reply_markup=main_menu)

# --- Inline-–∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data

    # FAQ
    if data == "faq_payment":
        await query.message.reply_text("üí≥ *–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:*\n\n–ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º –æ–ø–ª–∞—Ç—É –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π –∏–ª–∏ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏.", parse_mode="Markdown")
    elif data == "faq_delivery":
        await query.message.reply_text("üöö *–î–æ—Å—Ç–∞–≤–∫–∞:*\n\n–î–æ—Å—Ç–∞–≤–∫–∞ –≤ —á–µ—Ä—Ç–µ –≥–æ—Ä–æ–¥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.", parse_mode="Markdown")
    elif data == "faq_about":
        await query.message.reply_text("‚ÑπÔ∏è *–û –Ω–∞—Å:*\n\n–£ –Ω–∞—Å –ª—É—á—à–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏–≥—Ä –æ–Ω–ª–∞–π–Ω!", parse_mode="Markdown")
    elif data == "back_main":
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=main_menu)
        return

    # –ö–∞—Ç–∞–ª–æ–≥
    elif data.startswith("item_"):
        item_name = data.split("_", 1)[1]
        item = next((i for i in catalog["–ò–≥—Ä—ã"] if i["name"] == item_name), None)
        if not item:
            await query.message.reply_text("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        keyboard = [
            [InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="back_to_catalog")],
            [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_{item_name}")],
            [InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Ä–∑–∏–Ω—ã", callback_data="view_cart")],
            [InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        with open(item["photo"], "rb") as f:
            await query.message.reply_photo(photo=f, caption=f"üéÆ {item['name']} ‚Äî {item['price']}—Ä\n\n{item['description']}", reply_markup=reply_markup)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
    elif data.startswith("add_"):
        item_name = data.split("_", 1)[1]
        carts.setdefault(user_id, []).append(item_name)
        await query.message.reply_text(f"‚úÖ {item_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")

    # –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Ä–∑–∏–Ω—ã
    elif data == "view_cart":
        cart_items = carts.get(user_id, [])
        if not cart_items:
            await query.message.reply_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=main_menu)
            return

        text_cart = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n"
        total = 0
        keyboard = []
        for i in cart_items:
            item = next((it for it in catalog["–ò–≥—Ä—ã"] if it["name"] == i), None)
            if item:
                text_cart += f"- {i} ‚Äî {item['price']}—Ä\n"
                total += item['price']
                keyboard.append([InlineKeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å {i}", callback_data=f"remove_{i}")])
        keyboard.append([InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        text_cart += f"\nüí∞ –ò—Ç–æ–≥–æ: {total}—Ä"
        await query.message.reply_text(text_cart, reply_markup=reply_markup)

    # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    elif data.startswith("remove_"):
        item_name = data.split("_", 1)[1]
        if user_id in carts and item_name in carts[user_id]:
            carts[user_id].remove(item_name)
            await query.message.reply_text(f"‚ùå {item_name} —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.")
        else:
            await query.message.reply_text(f"{item_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ.")

    # –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
    elif data == "checkout":
        await query.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:\n\n"
            "—Ç–µ–ª–µ—Ñ–æ–Ω: <–≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω>\n"
            "–∏–º—è: <–≤–∞—à–µ –∏–º—è>\n"
            "–∞–¥—Ä–µ—Å: <–∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏>\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n+7 123 456 78 90\n–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤\n—É–ª. –õ–µ–Ω–∏–Ω–∞ 10",
            reply_markup=main_menu
        )

    # –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É
    elif data == "back_to_catalog":
        category = "–ò–≥—Ä—ã"
        keyboard = [[InlineKeyboardButton(f"{item['name']} ‚Äî {item['price']}—Ä", callback_data=f"item_{item['name']}")] for item in catalog[category]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(f"–ö–∞—Ç–∞–ª–æ–≥ {category}:", reply_markup=reply_markup)

# --- –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è Telegram
    url = f"https://<—Ç–≤–æ–µ_–∏–º—è_–ø—Ä–æ–µ–∫—Ç–∞>.onrender.com/{TOKEN}"
    bot.set_webhook(url)
    print(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {url}")
    app.run(host="0.0.0.0", port=port)
