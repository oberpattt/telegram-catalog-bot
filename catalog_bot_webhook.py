import os
import asyncio
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "8272770257:AAHCYt5GKjdaweaTI3frG-tWzItJK8OGSIs"
PUBLIC_URL = "https://oberpat.onrender.com"  # –¢–≤–æ–π Render-–¥–æ–º–µ–Ω
WEBHOOK_PATH = f"/{TOKEN}"
WEBHOOK_URL = f"{PUBLIC_URL}{WEBHOOK_PATH}"

# --- –ö–∞—Ç–∞–ª–æ–≥
catalog = {
    "–ò–≥—Ä—ã": [
        {"name": "–ò–≥—Ä–∞ –£–ª–∏—á–Ω—ã–π –≥–æ–Ω—â–∏–∫", "description": "–ó–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ —Å –æ—Ç–ª–∏—á–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫–æ–π –∏ —Å—é–∂–µ—Ç–æ–º.", "photo": "game1.jpeg", "price": 100},
        {"name": "–ò–≥—Ä–∞ Mortal Kombat (PS5)", "description": "–õ—É—á—à–∞—è –∏–≥—Ä–∞ –≤ –∂–∞–Ω—Ä–µ –¥—Ä–∞–∫", "photo": "game3.jpeg", "price": 250},
        {"name": "–ò–≥—Ä–∞ –í–µ–¥—å–º–∞–∫ 3. –î–∏–∫–∞—è –æ—Ö–æ—Ç–∞ (PS5)", "description": "–ü–æ–ª–Ω–æ–µ –∏–∑–¥–∞–Ω–∏–µ –¥–ª—è PS5, —Ä—É—Å—Å–∫–∞—è –æ–∑–≤—É—á–∫–∞", "photo": "game4.jpeg", "price": 250},
        {"name": "–ò–≥—Ä–∞ Dishonored 2", "description": "–°–ª–æ–∂–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è, –≥–¥–µ —Ä–µ—à–∞–µ—Ç –∫–∞–∂–¥—ã–π —Ö–æ–¥.", "photo": "game2.jpeg", "price": 200},
    ]
}

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
carts = {}
orders = {}
order_info = {}
global_order_number = 0

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    [
        [KeyboardButton("–ö–∞—Ç–∞–ª–æ–≥ –∏–≥—Ä")],
        [KeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Ä–∑–∏–Ω—ã"), KeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")],
        [KeyboardButton("–ú–æ–∏ –∑–∞–∫–∞–∑—ã")],
        [KeyboardButton("‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã")]
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)

# --- –•—ç–Ω–¥–ª–µ—Ä—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=main_menu)

async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.message.from_user.id

    if text == "–ö–∞—Ç–∞–ª–æ–≥ –∏–≥—Ä":
        category = "–ò–≥—Ä—ã"
        keyboard = [[InlineKeyboardButton(f"{item['name']} ‚Äî {item['price']}—Ä", callback_data=f"item_{item['name']}")] for item in catalog[category]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(f"–ö–∞—Ç–∞–ª–æ–≥ {category}:", reply_markup=reply_markup)

    elif text == "–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Ä–∑–∏–Ω—ã":
        cart_items = carts.get(user_id, [])
        if not cart_items:
            await update.message.reply_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=main_menu)
            return
        text_cart = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n"
        total = 0
        keyboard = []
        for i in cart_items:
            item = next((it for it in catalog["–ò–≥—Ä—ã"] if it["name"] == i), None)
            if item:
                text_cart += f"- {i} ‚Äî {item['price']}—Ä\n"
                total += item['price']
                keyboard.append([InlineKeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å {i}", callback_data=f"remove_{i}")])
        keyboard.append([InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        text_cart += f"\nüí∞ –ò—Ç–æ–≥–æ: {total}—Ä"
        await update.message.reply_text(text_cart, reply_markup=reply_markup)

    elif text == "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑":
        cart_items = carts.get(user_id, [])
        if not cart_items:
            await update.message.reply_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=main_menu)
            return
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:\n—Ç–µ–ª–µ—Ñ–æ–Ω: <—Ç–µ–ª–µ—Ñ–æ–Ω>\n–∏–º—è: <–∏–º—è>\n–∞–¥—Ä–µ—Å: <–∞–¥—Ä–µ—Å>",
            reply_markup=main_menu
        )

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá", reply_markup=main_menu)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data

    if data.startswith("item_"):
        item_name = data.split("_", 1)[1]
        item = next((i for i in catalog["–ò–≥—Ä—ã"] if i["name"] == item_name), None)
        if item:
            keyboard = [
                [InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="back_to_catalog")],
                [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_{item_name}")],
                [InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Ä–∑–∏–Ω—ã", callback_data="view_cart")],
                [InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            try:
                with open(item["photo"], "rb") as f:
                    await query.message.reply_photo(photo=f, caption=f"üéÆ {item['name']} ‚Äî {item['price']}—Ä\n{item['description']}", reply_markup=reply_markup)
            except FileNotFoundError:
                await query.message.reply_text(f"üéÆ {item['name']} ‚Äî {item['price']}—Ä\n{item['description']}", reply_markup=reply_markup)

    elif data.startswith("add_"):
        item_name = data.split("_", 1)[1]
        carts.setdefault(user_id, []).append(item_name)
        await query.message.reply_text(f"‚úÖ {item_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")

    elif data == "back_to_catalog":
        await handle_menu(update, context)

# --- –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π webhook-—Å–µ—Ä–≤–µ—Ä
async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu))
    app.add_handler(CallbackQueryHandler(button_handler))

    await app.bot.set_webhook(url=WEBHOOK_URL)
    print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

    port_str = os.environ.get("PORT")
    port = int(port_str) if port_str and port_str.isdigit() else 5000

    await app.run_webhook(
        listen="0.0.0.0",
        port=port,
        url_path=WEBHOOK_PATH,
        webhook_url=WEBHOOK_URL
    )

# --- –ó–∞–ø—É—Å–∫ (–±–µ–∑ asyncio.run)
if __name__ == "__main__":
    import asyncio
    asyncio.get_event_loop().create_task(main())
    asyncio.get_event_loop().run_forever()
